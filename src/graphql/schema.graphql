
# Principals

type Query {
    ping: String
    users(filters: UserInput): [User]
    sessions: [Session]
    reSendEmailVerification: Message
    profile: User
    logout: Message
    orders(filters: OrderInput): [Order]
    products(filters: FormAddProduct): [Product]
    categories(filters: CategoriesInput): [Category]
    refreshToken: Token
}

type Mutation {
    signUp(input: formSignUp): Message
    signUpAdmin(input: formSignUp): Message
    signUpSuperAdmin(input: formSignUp): Message
    signIn(input: formSignIn): Token
    updateProfile(input: formUpdateProfile): String
    verifyEmail(input: FormVerifyEmail): msjToken
    updatePassword(input: formUpdatePassword): String
    sendEmailUpdatePassword(input: FormEmail): Message
    finalizeOrder(input: FormFinalizeOrder): OrderFinalized
    validatePayment(input: FormValidatePayment): ID
    addProductOrder(input: FormOrderProduct): Order
    addCategory(input: FormAddCategory): ID
    deleteUser(input: FormDeleteUser): String
    addProduct(input: FormAddProduct): ID
    deleteProduct(input: FormDeleteProduct): String
    updateProduct(input: FormUpdateProduct): String
    deleteOrder(input: FormDeleteOrder): String
}

# Auxiliars

input FormVerifyEmail {
    email: String!
    six_digit_code: String!
}

input FormValidatePayment {
    collection_id: ID
    collection_status: String
    payment_id: ID
    status: String
    external_reference: String
    payment_type: String
    merchant_order_id: ID
    preference_id: ID
    site_id: String
    processing_mode: String
    merchant_account_id: String
}

type OrderFinalized {
    preference_id: ID
    message: String
}

input FormDeleteOrder {
    order_id: ID!
}

input OrderInput {
    status: String
}

input FormFinalizeOrder {
    payment: String
    address: FormAddresOrder
}

input FormUpdateProduct {
    product_id: ID!
    data: FormAddProduct!
}

input FormDeleteProduct {
    product_id: ID!
}

input FormDeleteUser {
    password: String!
}

input FormEmail {
    email: String!
}

input FormAddCategory {
    _id: ID
    name: String
    products: [ID]
    sub_categories: [ID]
}

input FormAddProduct {
    name: String
    description: String
    stock: Int
    visible: Boolean
    price: Float
    photo: String
    max_order: Int
    discount: Int
    promotion: Boolean
}

type Category {
    _id: ID
    name: String
    products: [Product]
    sub_categories: [Category]
}

input CategoriesInput {
    name: String
}

input FormOrderProduct {
    product_id: ID!
    quantity: Int!
}

type Cost {
    import: Float
    discount: Float
    delivery: Float
    total: Float
}

type OrderProduct {
    product: Product
    quantity: Int
    total: Float
}

input FormAddresOrder {
    city: String!
    street: String!
    zip_code: String!
    number: String!
    indications: String
}

type AddresOrder {
    city: String
    street: String
    zip_code: String
    number: String
    indications: String
}

type Order {
    _id: ID
    user_id: ID
    number: Int
    created_at: String
    address: AddresOrder
    products: [OrderProduct]
    cost: Cost
    payment: String
    status: String
    payment_id: String
    status_payment: String
}

type Product {
    _id: ID
    price: Float
    name: String
    description: String
    stock: Int
    visible: Boolean
    photo: String
    max_order: Int
    discount: Int
    promotion: Boolean
}

input UserInput {
    _id: ID
    name: String
    lastname: String
    email: String
    account_verified: Boolean
    phone: String
}

type User {
    _id: ID
    name: String
    lastname: String
    email: String
    account_verified: Boolean
    role: String
    phone: String
}

input formSignUp {
    name: String!
    lastname: String!
    email: String!
    password: String!
    phone: String!
}

input formSignIn {
    email: String!
    password: String!
}

type msjToken {
    message: String
    access_token: String
}

input formUpdateProfile {
    name: String
    lastname: String
}

input formUpdatePassword {
    six_digit_code: String!
    new_password: String!
}

type Token {
    access_token: String
}

type Session {
    _id: ID
    user_id: ID
    status: Boolean
    start: String
    end: String
    hash_token: String
}

type Message {
    message: String
}